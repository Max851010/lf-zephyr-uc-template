/** @author Cheng Yen, Tsai */
target uC
preamble {=
  #define WIDTH 80      // Width of the terminal screen
  #define HEIGHT 6      // Number of rows for the ski lift
  #define NUM_CHAIRS 10 // Number of ski lift chairs
  #define ANIMATION_HEIGHT 13
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
  #include <unistd.h>
  #include <signal.h>
  static void skiLiftInit(int32_t offset);
  static void skiLiftUpdate(int32_t offset);
  static void printMotionStatus(char *str_motion);
  static void printGateStatus(char *str_gate);

  static void moveCursor(int32_t row, int32_t col)
  {
    // Move cursor to (row, col)
    fprintf(stdout, "\033[%d;%dH", row, col);
    fflush(stdout);
  }
  static void clearScreen()
  {
    fprintf(stdout, "\033[H\033[J"); // ANSI escape code to clear the screen
    fflush(stdout);
  }
  static void clearLine()
  {
    fprintf(stdout, "\033[2K"); // Clear the entire line
    fflush(stdout);
  }

  static void drawSkiLift(int32_t offset)
  {
    char screen[HEIGHT][WIDTH];

    // Clear the screen array
    for (int32_t i = 0; i < HEIGHT; i++)
    {
      memset(screen[i], ' ', WIDTH - 1);
      screen[i][WIDTH - 1] = '\0';
    }

    // Draw the top row of chairs
    for (int32_t i = 0; i < NUM_CHAIRS; i++)
    {
      int32_t pos = (i * 8 + offset) % WIDTH;
      if (pos + 1 > 4 && pos + 1 < WIDTH - 10)
      {
        screen[0][pos] = '-';
        screen[0][pos + 1] = 'o';
        screen[0][pos + 2] = '-';
        screen[1][pos] = '/';
        screen[1][pos + 1] = '|';
        screen[1][pos + 2] = '\\';
      }
    }

    // Draw the bottom row of chairs
    for (int32_t i = 0; i < NUM_CHAIRS; i++)
    {
      int32_t pos = (i * 8 - offset + WIDTH) % WIDTH;
      if (pos + 2 > 4 && pos + 2 < WIDTH - 10)
      {
        screen[HEIGHT - 2][pos] = '-';
        screen[HEIGHT - 2][pos + 1] = 'o';
        screen[HEIGHT - 2][pos + 2] = '-';
        screen[HEIGHT - 1][pos] = '/';
        screen[HEIGHT - 1][pos + 1] = '|';
        screen[HEIGHT - 1][pos + 2] = '\\';
      }
    }

    // Draw the left-most and right-most vertical lines
    for (int32_t i = 0; i < NUM_CHAIRS; i++)
    {
      int32_t pos_top =
          (i * 8 + offset) % WIDTH;
      int32_t pos_bottom =
          (i * 8 - offset + WIDTH) % WIDTH;

      // Left vertical connection (top to bottom)
      if (pos_top + 1 > 5 && pos_top + 1 < WIDTH - 10)
      {
        screen[2][1] = '|';
        screen[3][1] = '|';
      }

      // Right vertical connection (bottom to top)
      if (pos_bottom + 2 > 8 && pos_bottom + 2 < WIDTH - 5)
      {
        screen[2][WIDTH - 6] = '|';
        screen[3][WIDTH - 6] = '|';
      }
    }

    // Print the screen to the terminal
    for (int32_t i = 0; i < HEIGHT; i++)
    {
      fprintf(stdout, "%s\n", screen[i]);
    }
  }

  static void skiLiftInit(int32_t offset)
  {
    clearScreen();
    fprintf(stdout, "Ski Lift Animation\n");
    fprintf(stdout,
            "---------------------------------------------------------------------"
            "-------\n\n\n");
    drawSkiLift(offset);
    fprintf(stdout, "\n\n");
    fprintf(stdout,
            "---------------------------------------------------------------------"
            "-------\n");
    // offset = (offset + 1) % WIDTH;
  }
  static void skiLiftUpdate(int32_t offset)
  {
    for (int32_t i = HEIGHT + 3 - 1; i > 0; i--)
    {
      moveCursor(i + 4, 1);
      clearLine();
    }
    drawSkiLift(offset);
    fprintf(stdout, "\n\n");
    fprintf(stdout,
            "---------------------------------------------------------------------"
            "-------\n");
    // offset = (offset + 1) % WIDTH;
  }
  static void printMotionStatus(char *str_motion)
  {
    moveCursor(ANIMATION_HEIGHT + 1, 1);
    clearLine();
    fprintf(stdout, "Lift Status: %s\n", str_motion);
    fflush(stdout);
  }
  static void printGateStatus(char *str_gate)
  {
    moveCursor(ANIMATION_HEIGHT + 2, 1);
    clearLine();
    fprintf(stdout, "Gate Status: %s\n", str_gate);
    fflush(stdout);
  }

  static void printReadyWeight(float ready_weight)
  {
    moveCursor(ANIMATION_HEIGHT + 3, 1);
    clearLine();
    fprintf(stdout, "Current weight on the ready area: %.2f\n", ready_weight);
    fflush(stdout);
  }

  static void printLiftWeight(float lift_weight)
  {
    moveCursor(ANIMATION_HEIGHT + 4, 1);
    clearLine();
    fprintf(stdout, "The weight will be on the current chair lift: %.2f\n", lift_weight);
    fflush(stdout);
  }

  static void printExitWeight(float exit_weight)
  {
    moveCursor(ANIMATION_HEIGHT + 5, 1);
    clearLine();
    fprintf(stdout, "Current weight on the exit area: %.2f\n", exit_weight);
    fflush(stdout);
  }

  static void printDebugStr(char debug_str[])
  {
    moveCursor(ANIMATION_HEIGHT + 8, 1);
    clearLine();
    fprintf(stdout, "[Debug] String: %s\n", debug_str);
    fflush(stdout);
  }
  static void printDebugInt(int32_t debug_int)
  {
    moveCursor(ANIMATION_HEIGHT + 7, 1);
    clearLine();
    fprintf(stdout, "[Debug] Int: %d\n", debug_int);
    fflush(stdout);
  }
=}
reactor ScreenPrinter {
  preamble {=
    //    void skiLiftInit(int32_t offset);
    //    void skiLiftUpdate(int32_t offset);
    //    void printMotionStatus(char* str_motion);
    //    void printGateStatus(char* str_gate);
    //    void printDebugStr(char* debug_str);
    //    void printDebugInt(int32_t debug_int);
    //    void printReadyWeight(float ready_weight);
    //    void printLiftWeight(float lift_weight);
    //    void printExitWeight(float exit_lift_weight);

  =}
  input offset: int32_t
  input debug_int: int32_t
  input sl_init: bool
  input ready_weight: float
  input lift_weight: float
  input exit_weight: float

  reaction(sl_init) {=
    if (sl_init->value) {
      skiLiftInit(0);
    }
  =}

  reaction(offset) {=
    skiLiftUpdate(offset->value);
  =}

  reaction(debug_int) {=
    printDebugInt(debug_int->value);
  =}

  reaction(ready_weight) {=
    printReadyWeight(ready_weight->value);
  =}

  reaction(lift_weight) {=
    printLiftWeight(lift_weight->value);
  =}

  reaction(exit_weight) {=
    printExitWeight(exit_weight->value);
  =}
}
